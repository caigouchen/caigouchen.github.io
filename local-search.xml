<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>双序列全局比对：Biopython包的应用及手撕Needleman-Wunsch算法</title>
    <link href="/2022/01/18/python%E5%AE%9E%E7%8E%B0Needleman-Wunsch%E7%AE%97%E6%B3%95/"/>
    <url>/2022/01/18/python%E5%AE%9E%E7%8E%B0Needleman-Wunsch%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="双序列全局比对"><a href="#双序列全局比对" class="headerlink" title="双序列全局比对"></a>双序列全局比对</h2><h3 id="python实现Needleman-Wunsch算法"><a href="#python实现Needleman-Wunsch算法" class="headerlink" title="python实现Needleman-Wunsch算法"></a>python实现Needleman-Wunsch算法</h3><h4 id="0、写在前面"><a href="#0、写在前面" class="headerlink" title="0、写在前面"></a>0、写在前面</h4><figure class="highlight vala"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 需要的知识：动态规划算法</span><br><span class="hljs-meta"># 具体有关算法的知识可以参考以下链接</span><br><span class="hljs-meta"># https://en.wikipedia.org/wiki/Needleman-Wunsch_algorithm（维基百科Needleman-Wunsch算法）</span><br><span class="hljs-meta"># https://www.bilibili.com/video/BV1zW411L79R?p=36（山东大学mooc：生物信息学：双序列全局比对）</span><br><span class="hljs-meta"># 在配对、错配和空位罚分的处理上简化了算法，应该是一个计分矩阵的，后期有时间会按着山大老师讲的课更新一下代码</span><br></code></pre></td></tr></table></figure><h4 id="1、代码过程"><a href="#1、代码过程" class="headerlink" title="1、代码过程"></a>1、代码过程</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">from</span> Bio.Seq import Seq<br><br><span class="hljs-attribute">match_award</span> = <span class="hljs-number">1</span>  # 配对得一分<br><span class="hljs-attribute">mismatch_penalty</span> = -<span class="hljs-number">1</span>  # 错配罚<span class="hljs-number">1</span>分<br><span class="hljs-attribute">gap_penalty</span> = -<span class="hljs-number">1</span>  # 空位罚分<span class="hljs-number">1</span>分<br><span class="hljs-attribute">optimum</span> = None  # 存储最优比对<br><br><br><span class="hljs-attribute">def</span> match_score(a, b):  # 判断是配对还是错配<br>    <span class="hljs-attribute">if</span> a == b:<br>        <span class="hljs-attribute">return</span> match_award<br>    <span class="hljs-attribute">else</span>:<br>        <span class="hljs-attribute">return</span> mismatch_penalty<br><br><br><span class="hljs-attribute">def</span> needleman_wunsch(seq<span class="hljs-number">1</span>, seq<span class="hljs-number">2</span>):<br>    <span class="hljs-attribute">m</span>, n = len(seq<span class="hljs-number">2</span>), len(seq<span class="hljs-number">1</span>)<br>    <span class="hljs-attribute">score_matrix</span> = np.zeros((m + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>), dtype=int)  # 初始化打分矩阵<br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">0</span>, m + <span class="hljs-number">1</span>):  # 初始化第一列<br>        <span class="hljs-attribute">score_matrix</span>[i][<span class="hljs-number">0</span>] = gap_penalty * i<br>    <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">0</span>, n + <span class="hljs-number">1</span>):  # 初始化第一行<br>        <span class="hljs-attribute">score_matrix</span>[<span class="hljs-number">0</span>][j] = gap_penalty * j<br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):  # 从斜上、上、左找最大值，并记录路径<br>        <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-attribute">diagonal</span> = score_matrix[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + match_score(seq<span class="hljs-number">2</span>[i - <span class="hljs-number">1</span>], seq<span class="hljs-number">1</span>[j - <span class="hljs-number">1</span>])<br>            <span class="hljs-attribute">up</span> = score_matrix[i - <span class="hljs-number">1</span>][j] + gap_penalty<br>            <span class="hljs-attribute">left</span> = score_matrix[i][j - <span class="hljs-number">1</span>] + gap_penalty<br>            <span class="hljs-attribute">max_pointer</span> = max(diagonal, up, left)<br>            <span class="hljs-attribute">score_matrix</span>[i][j] = max_pointer<br>    <span class="hljs-attribute">return</span> score_matrix<br><br><br><span class="hljs-comment"># 回溯出比对好的序列,并记录最优比对</span><br><span class="hljs-attribute">def</span> traceback_seq(score_matrix):<br>    <span class="hljs-attribute">align1</span>, align<span class="hljs-number">2</span> = &#x27;&#x27;, &#x27;&#x27;<br>    <span class="hljs-attribute">i</span>, j = score_matrix.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>, score_matrix.shape[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span><br>    <span class="hljs-attribute">a</span> = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br>    <span class="hljs-attribute">flag</span> = True<br>    <span class="hljs-attribute">global</span> optimum<br>    <span class="hljs-attribute">while</span> i &gt; <span class="hljs-number">0</span> and j &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">score_current</span> = score_matrix[i][j]<br>        <span class="hljs-attribute">score_diagonal</span> = score_matrix[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">score_up</span> = score_matrix[i][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">score_left</span> = score_matrix[i - <span class="hljs-number">1</span>][j]<br>        <span class="hljs-attribute">a</span>[:, :<span class="hljs-number">2</span>] = j, i<br>        <span class="hljs-attribute">if</span> score_current == score_diagonal + match_score(seq<span class="hljs-number">2</span>[i - <span class="hljs-number">1</span>], seq<span class="hljs-number">1</span>[j - <span class="hljs-number">1</span>]):<br>            <span class="hljs-attribute">align1</span> += seq<span class="hljs-number">2</span>[i - <span class="hljs-number">1</span>]<br>            <span class="hljs-attribute">align2</span> += seq<span class="hljs-number">1</span>[j - <span class="hljs-number">1</span>]<br>            <span class="hljs-attribute">i</span> -= <span class="hljs-number">1</span><br>            <span class="hljs-attribute">j</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-attribute">elif</span> score_current == score_left + gap_penalty:<br>            <span class="hljs-attribute">align1</span> += seq<span class="hljs-number">2</span>[i - <span class="hljs-number">1</span>]<br>            <span class="hljs-attribute">align2</span> += &#x27;-&#x27;<br>            <span class="hljs-attribute">i</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-attribute">elif</span> score_current == score_up + gap_penalty:<br>            <span class="hljs-attribute">align1</span> += &#x27;-&#x27;<br>            <span class="hljs-attribute">align2</span> += seq<span class="hljs-number">1</span>[j - <span class="hljs-number">1</span>]<br>            <span class="hljs-attribute">j</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-attribute">a</span>[:, <span class="hljs-number">2</span>:] = j, i<br>        <span class="hljs-attribute">if</span> flag:<br>            <span class="hljs-attribute">optimum</span> = np.copy(a)<br>            <span class="hljs-attribute">flag</span> = False<br>        <span class="hljs-attribute">else</span>:<br>            <span class="hljs-attribute">optimum</span> = np.concatenate((optimum, a), axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">a</span>[:, :<span class="hljs-number">2</span>] = a[:, <span class="hljs-number">2</span>:]<br>    <span class="hljs-attribute">while</span> i &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">align1</span> += seq<span class="hljs-number">2</span>[i - <span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">align2</span> += &#x27;-&#x27;<br>        <span class="hljs-attribute">i</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-attribute">a</span>[:, <span class="hljs-number">2</span>:] = j, i<br>        <span class="hljs-attribute">optimum</span> = np.concatenate((optimum, a), axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">while</span> j &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">align1</span> += &#x27;-&#x27;<br>        <span class="hljs-attribute">align2</span> += seq<span class="hljs-number">1</span>[j - <span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">j</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-attribute">a</span>[:, <span class="hljs-number">2</span>:] = j, i<br>        <span class="hljs-attribute">optimum</span> = np.concatenate((optimum, a), axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">return</span> align<span class="hljs-number">1</span>, align<span class="hljs-number">2</span><br><br><span class="hljs-comment"># 序列</span><br><span class="hljs-attribute">seq1</span> = Seq(<span class="hljs-string">&quot;GAAG&quot;</span>)<br><span class="hljs-attribute">seq2</span> = Seq(<span class="hljs-string">&quot;GAT&quot;</span>)<br><span class="hljs-attribute">score_matrix</span> = needleman_wunsch(seq<span class="hljs-number">1</span>, seq<span class="hljs-number">2</span>)<br><span class="hljs-attribute">align1</span>, align<span class="hljs-number">2</span> = traceback_seq(score_matrix)<br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;计分矩阵为\n&quot;</span>, score_matrix)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;比对序列结果为：&quot;</span>)<br><span class="hljs-attribute">print</span>(align<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(align<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h4 id="2、结果"><a href="#2、结果" class="headerlink" title="2、结果"></a>2、结果</h4><img src="../python实现Needleman-Wunsch算法/image-20220118135345317.png">### Biopython实现序列比对：Bio.Align包<h4 id="0、写在前面-1"><a href="#0、写在前面-1" class="headerlink" title="0、写在前面"></a>0、写在前面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">没有仔细学过，只是为了课程需要，后期应该会认真学<br></code></pre></td></tr></table></figure><h4 id="1、代码过程-1"><a href="#1、代码过程-1" class="headerlink" title="1、代码过程"></a>1、代码过程</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Bio import<span class="hljs-built_in"> Align</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># classBio.Align.PairwiseAlignment(target, query, path, score)</span><br>aligner = Align.PairwiseAligner()<br>alignments = aligner.align(<span class="hljs-string">&quot;GAACT&quot;</span>, <span class="hljs-string">&quot;GATAC&quot;</span>)<br>alignment = alignments[0]<br><span class="hljs-builtin-name">print</span>(alignment)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;#######################结果分割线##########################&quot;</span>)<br><span class="hljs-comment"># classBio.Align.PairwiseAligner(**kwargs)</span><br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">使用动态规划执行成对序列比对</span><br><span class="hljs-string">这提供了在两个序列之间获得全局和局部比对的函数。</span><br><span class="hljs-string">全局比对找到两个序列中所有字符之间的最佳一致性。局部对齐只找到对齐最好的子序列</span><br><span class="hljs-string">要执行成对序列比对，首先创建一个 PairwiseAligner 对象</span><br><span class="hljs-string">该对象存储匹配和不匹配分数，以及差距分数</span><br><span class="hljs-string">通常，匹配分数为正，而错配分数和差距分数为负或零。默认情况下，匹配分数为 1，不匹配和差距分数为零。</span><br><span class="hljs-string">根据间隙分数的值，PairwiseAligner 对象自动选择适当的对齐算法（Needleman-Wunsch、Smith-Waterman、Gotoh 或 Waterman-Smith-Beyer ）</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>aligner = Align.PairwiseAligner()<br>alignments = aligner.align(<span class="hljs-string">&quot;GAACT&quot;</span>, <span class="hljs-string">&quot;GATAC&quot;</span>)<br><span class="hljs-keyword">for</span> alignment <span class="hljs-keyword">in</span> sorted(alignments):<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Score = %.1f:&quot;</span> % alignment.score)<br>    <span class="hljs-builtin-name">print</span>(alignment)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;#######################结果分割线##########################&quot;</span>)<br><span class="hljs-comment"># 也可进行局部比对</span><br>aligner.mode = <span class="hljs-string">&#x27;local&#x27;</span><br>alignments = aligner.align(<span class="hljs-string">&quot;TACCG&quot;</span>, <span class="hljs-string">&quot;ACG&quot;</span>)<br><span class="hljs-keyword">for</span> alignment <span class="hljs-keyword">in</span> sorted(alignments):<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Score = %.1f:&quot;</span> % alignment.score)<br>    <span class="hljs-builtin-name">print</span>(alignment)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;#######################结果分割线##########################&quot;</span>)<br>aligner.mode = <span class="hljs-string">&#x27;global&#x27;</span><br><span class="hljs-comment"># 自定义得分相同字符得 2 分，不相同字符扣 1 分。</span><br>aligner.match_score = 2<br>aligner.mismatch_score = -1<br><span class="hljs-comment"># 自定义缺口罚分</span><br>aligner.open_gap_score = -0.5<br>aligner.extend_gap_score = -0.1<br>aligner.target_end_gap_score = 0.0<br>aligner.query_end_gap_score = 0.0<br><span class="hljs-keyword">for</span> alignment <span class="hljs-keyword">in</span> aligner.align(<span class="hljs-string">&quot;TACCG&quot;</span>, <span class="hljs-string">&quot;ACG&quot;</span>):<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Score = %.1f:&quot;</span> % alignment.score)<br>    <span class="hljs-builtin-name">print</span>(alignment)<br></code></pre></td></tr></table></figure><h4 id="2、结果-1"><a href="#2、结果-1" class="headerlink" title="2、结果"></a>2、结果</h4><img src="../python实现Needleman-Wunsch算法/image-20211106193459776.png">]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HiC-Pro3的安装和官方测试数据的运行</title>
    <link href="/2022/01/16/HiC-Pro3%E5%AE%89%E8%A3%85%E5%92%8C%E5%AE%98%E6%96%B9%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%90%E8%A1%8C/"/>
    <url>/2022/01/16/HiC-Pro3%E5%AE%89%E8%A3%85%E5%92%8C%E5%AE%98%E6%96%B9%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="一、HiC-Pro3安装流程"><a href="#一、HiC-Pro3安装流程" class="headerlink" title="一、HiC-Pro3安装流程"></a>一、HiC-Pro3安装流程</h3><h4 id="1、需要的条件"><a href="#1、需要的条件" class="headerlink" title="1、需要的条件"></a>1、需要的条件</h4><figure class="highlight vala"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#一个服务器或者配置很好的个人电脑</span><br></code></pre></td></tr></table></figure><h4 id="2、正式安装HiC-Pro3"><a href="#2、正式安装HiC-Pro3" class="headerlink" title="2、正式安装HiC-Pro3"></a>2、正式安装HiC-Pro3</h4><h5 id="HiC-Pro依赖的软件"><a href="#HiC-Pro依赖的软件" class="headerlink" title="HiC-Pro依赖的软件"></a>HiC-Pro依赖的软件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">创建hic-pro专门的conda环境</span><br><span class="hljs-meta">#</span><span class="bash">注意你安装的conda版本和hicpro尽量同版本3.x或者2.x,如果不同后期会疯狂报错</span><br>conda create -n hicpro3 python=3.7<br>conda activate hicpro3<br><span class="hljs-meta">#</span><span class="bash">以下都是在hicpro3的环境下完成的</span><br>python3.7 -m pip install bx-python<br>python3.7 -m pip install iced<br>python3.7 -m pip install scipy<br>python3.7 -m pip install pysam<br>python3.7 -m pip install pandas<br><span class="hljs-meta">#</span><span class="bash">查看python包都安在哪儿了</span><br>pip list<br>pip show bx-python<br><span class="hljs-meta">#</span><span class="bash">python包必须在的位置</span><br>/sde/ckm/miniconda3/envs/hicpro3/lib/python3.7/site-packages<br></code></pre></td></tr></table></figure><h5 id="HiC-Pro下载"><a href="#HiC-Pro下载" class="headerlink" title="HiC-Pro下载"></a>HiC-Pro下载</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#历史版本https://github.com/nservant/HiC-Pro/releases</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/nservant/</span>HiC-Pro<span class="hljs-regexp">/archive/</span>refs<span class="hljs-regexp">/tags/</span>HiC-Pro-<span class="hljs-number">3.1</span>.<span class="hljs-number">0</span>.tar.gz<br>tar -zxvf HiC-Pro-<span class="hljs-number">3.1</span>.<span class="hljs-number">0</span>.tar.gz<br>cd HiC-Pro-<span class="hljs-number">3.1</span>.<span class="hljs-number">0</span>/<br><span class="hljs-comment">#查看并修改配置文件</span><br>vim config-install.txt<br>PREFIX = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro/HiC-Pro-<span class="hljs-number">3</span> <span class="hljs-comment">#最后安装目录，不要写当前路径，会报错</span><br>BOWTIE2_PATH = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/hicpro3/</span>bin/bowtie2<br>SAMTOOLS_PATH = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/hicpro3/</span>bin/samtools<br>R_PATH = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/hicpro3/</span>bin/r<br>PYTHON_PATH = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/hicpro3/</span>bin/python<br>CLUSTER_SYS = TORQUE<br></code></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">make configure <br><span class="hljs-comment">#报错了，说python的依赖包没安</span><br>- Python libraries ...<br>Can not proceed without the required Python libraries, please install them and re-run<br><span class="hljs-comment">#查看报错</span><br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3.1.0/</span>tmp<br>cat check_python.log <span class="hljs-comment">#然后把缺的包安上，后续遇到其他报错同理</span><br><span class="hljs-comment">#报错，说R没安好</span><br>R packages NOT installed successfully. Look at the tmp/install_Rpackages.Rout <span class="hljs-keyword">for</span> additional informations<br><span class="hljs-comment">#查看报错</span><br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3.1.0/</span>tmp<br>cat check_Rpackages.Rout<br><span class="hljs-comment">#后来发现是没有在hicpro3的环境，base环境没安R，在hicpro环境下就可以</span><br>make install<br><span class="hljs-comment">#报错</span><br>cp: cannot copy a directory, <span class="hljs-string">&#x27;/sde/ckm/software/hicpro/HiC-Pro-3.1.0&#x27;</span>, into itself, <span class="hljs-string">&#x27;/sde/ckm/software/hicpro/HiC-Pro-3.1.0/HiC-Pro_3.1.0/HiC-Pro-3.1.0&#x27;</span><br>make: *** [Makefile:<span class="hljs-number">78</span>: cp] Error <span class="hljs-number">1</span><br><span class="hljs-comment">#原因config-install.txt中设置PREFIX的软件依赖路径时写了当前路径，cp不行，所以新建一个目录就可以</span><br>HiC-Pro installed <span class="hljs-keyword">in</span> <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span> !<br></code></pre></td></tr></table></figure><h5 id="检查是否安好了"><a href="#检查是否安好了" class="headerlink" title="检查是否安好了"></a>检查是否安好了</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/bin/</span>HiC-Pro -h<br></code></pre></td></tr></table></figure><h3 id="二、测试数据运行"><a href="#二、测试数据运行" class="headerlink" title="二、测试数据运行"></a>二、测试数据运行</h3><h4 id="1、检查一下"><a href="#1、检查一下" class="headerlink" title="1、检查一下"></a>1、检查一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看服务器上可用线程数</span><br>grep &#x27;processor&#x27; /proc/cpuinfo | sort -u | wc -l<br><span class="hljs-meta">#</span><span class="bash">查看线程</span><br>top -H<br></code></pre></td></tr></table></figure><h4 id="2、开始配置"><a href="#2、开始配置" class="headerlink" title="2、开始配置"></a>2、开始配置</h4><h5 id="必备文件"><a href="#必备文件" class="headerlink" title="必备文件"></a>必备文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#其实人和鼠不需建，原始annotation里有，学个方法</span><br><span class="hljs-comment">#1、建人的索引</span><br><span class="hljs-comment">#注意bowtie2不能对压缩的文件建索引，所以下载好的参考基因组必须要先解压</span><br>gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz<br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/index/</span>bowtie2/hg19<br>nohup bowtie2-build --threads <span class="hljs-number">10</span> ~<span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/reference/</span>hg19<span class="hljs-regexp">/Homo_sapiens.GRCh38.dna.primary_assembly.fa ./</span>hg19 &amp;<br><span class="hljs-comment">#2、自己建bed文件</span><br>nohup <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/bin/u</span>tils<span class="hljs-regexp">/digest_genome.py ~/</span>sde<span class="hljs-regexp">/ckm/</span>reference<span class="hljs-regexp">/hg19/</span>Homo_sapiens.GRCh38.dna.primary_assembly.fa -r hindiii -o HindIII_resfrag_hg19.bed &amp;<br></code></pre></td></tr></table></figure><h5 id="运行前的准备工作"><a href="#运行前的准备工作" class="headerlink" title="运行前的准备工作"></a>运行前的准备工作</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#1、其中BED文件和table文件必须要放在HiC-Pro_3.1.0/annotation目录下</span><br><span class="hljs-comment">#BED文件：记录可能的酶切位点，table文件记录每条contig/scaffold/chromosome的长度</span><br><span class="hljs-comment">#2、新建比对序列的文件,注意文件夹应以样品名命名</span><br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/Hi-C/</span>hicpro<br>mkdir hic_input/test_data<br><span class="hljs-comment">#下载数据</span><br>wget https:<span class="hljs-regexp">//</span>zerkalo.curie.fr<span class="hljs-regexp">/partage/</span>HiC-Pro/HiCPro_testdata.tar.gz &amp;&amp; tar -zxvf HiCPro_testdata.tar.gz<br><span class="hljs-comment">#3、将config-hicpro.txt拷贝到当前目录</span><br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/Hi-C/</span>hicpro<br>cp <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/config-hicpro.txt ./</span><br>mv config-hicpro.txt config-hicpro-hg19.txt<br><span class="hljs-comment">#具体配置见下-------------------------------------------------</span><br>N_CPU = <span class="hljs-number">30</span>  <span class="hljs-comment">#bowtie2比对时CPU线程数</span><br>LOGFILE = hicpro.log  <span class="hljs-comment">#log文件名</span><br><span class="hljs-comment">#bowtie2建索引的路径</span><br>BOWTIE2_IDX_PATH = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/index/</span>bowtie2/hg19<br><span class="hljs-comment">#前缀</span><br>REFERENCE_GENOME = hg19<br><span class="hljs-comment">#genome.sizes的绝对路径</span><br>GENOME_SIZE = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/annotation/</span>chrom_hg19.sizes<br><span class="hljs-comment">#消化位点绝对路径</span><br>GENOME_FRAGMENT = <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/annotation/</span>HindIII_resfrag_hg19.bed<br><span class="hljs-comment">#不同酶切位点对应序列为HindIII(AAGCTAGCTT), MboI(GATCGATC) , DpnII(GATCGATC),NcoI(CCATGCATGG)</span><br>LIGATION_SITE = AAGCTAGCTT<br></code></pre></td></tr></table></figure><h4 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#hic_output不要提前建，否则没法后台运行</span><br>cd <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/Hi-C/</span>hicpro<br>nohup <span class="hljs-regexp">/sde/</span>ckm<span class="hljs-regexp">/software/</span>hicpro<span class="hljs-regexp">/HiC-Pro-3/</span>HiC-Pro_3.<span class="hljs-number">1.0</span><span class="hljs-regexp">/bin/</span>HiC-Pro -i test_data -o hic_output_hg19 -c config-hicpro-hg19.txt &amp;<br><span class="hljs-comment">#踩坑点</span><br><span class="hljs-comment">#注意ensamble参考基因组的染色体名称是1,而hicpro的给的参考bed文件是chr1,自己新建就可以,或者自己改一下</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>三维基因组</tag>
      
      <tag>Hi-C</tag>
      
      <tag>组学分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo和github搭建个人博客</title>
    <link href="/2022/01/16/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/16/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="使用hexo和github-pages搭建个人博客"><a href="#使用hexo和github-pages搭建个人博客" class="headerlink" title="使用hexo和github pages搭建个人博客"></a>使用hexo和github pages搭建个人博客</h2><h4 id="0、需要的软件"><a href="#0、需要的软件" class="headerlink" title="0、需要的软件"></a>0、需要的软件</h4><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">nodejs：https://nodejs.org/en/download/</span><br><span class="hljs-meta">#</span><span class="bash">git：https://git-scm.com/download/win</span><br><span class="hljs-meta">#</span><span class="bash">hexo官网：https://hexo.io/zh-cn/</span><br></code></pre></td></tr></table></figure><h4 id="1、建立github-pages的基础网页"><a href="#1、建立github-pages的基础网页" class="headerlink" title="1、建立github pages的基础网页"></a>1、建立github pages的基础网页</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">新建一个仓库，仓库名应该是：你的github用户名.github.io</span><br></code></pre></td></tr></table></figure><img src="../使用hexo和github搭建个人博客/image-20220116155404134.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入用户名.github.io仓库的settings，下拉到最后，进入github pages</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">choose a theme可以选择github pages自带的主题，<span class="hljs-built_in">source</span>选择main，然后save。访问https://用户名.github.io/应该可以看到基础的界面，成功了是绿色</span><br></code></pre></td></tr></table></figure><img src="../使用hexo和github搭建个人博客/image-20220116160704195.png"><h4 id="2、使用hexo使博客更加好看-windows系统下"><a href="#2、使用hexo使博客更加好看-windows系统下" class="headerlink" title="2、使用hexo使博客更加好看(windows系统下)"></a>2、使用hexo使博客更加好看(windows系统下)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装nodejs好后，打开nodejs</span><br>npm install -g hexo-cli    #安装hexo<br><span class="hljs-meta">#</span><span class="bash">切换到cmd中，进入到你希望博客安装位置</span><br>hexo init x #创建一个hexo项目<br>cd x<br>npm install<br><span class="hljs-meta">#</span><span class="bash">本地启动</span><br>hexo g<br>hexo server<br><span class="hljs-meta">#</span><span class="bash">浏览器访问 http://localhost:4000，可以看到hexo的默认界面</span><br><span class="hljs-meta">#</span><span class="bash">本地则会出现如下界面</span><br></code></pre></td></tr></table></figure><p><img src="image-20220116161835269.png"></p><h4 id="3、hexo主题配置"><a href="#3、hexo主题配置" class="headerlink" title="3、hexo主题配置"></a>3、hexo主题配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#我选择的是fluid主题：https://github.com/fluid-dev/hexo-theme-fluid</span><br><span class="hljs-comment">#将项目clone到本地的theme文件夹下</span><br>git clone https://github.com/fluid-dev/hexo-theme-fluid.git<span class="hljs-comment">#或者download zip解压</span><br></code></pre></td></tr></table></figure><h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">打开本地项目的_config.yml文件（我用的是notepad++）</span><br>theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><h5 id="创建about"><a href="#创建about" class="headerlink" title="创建about"></a>创建about</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo new page about<br><span class="hljs-comment">#创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">---</span><br><span class="hljs-string">title: about</span><br><span class="hljs-string">date: 2022-01-16 15:15:39</span><br><span class="hljs-string">layout: about</span><br><span class="hljs-string">---</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>hexo g -d <span class="hljs-comment">#更新</span><br>hexo s<br><span class="hljs-comment">#浏览器访问 http://localhost:4000，可以修改后的主题</span><br></code></pre></td></tr></table></figure><h5 id="创建测试文章"><a href="#创建测试文章" class="headerlink" title="创建测试文章"></a>创建测试文章</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">修改_config.yml</span><br>post_asset_folder: true #在生成文章的时候生成一个同名的资源目录用于存放图片文件。<br>hexo new post #测试文章执行完成后在source\_posts目录下生成了一个md文件和一个同名的资源目录<br><span class="hljs-meta">#</span><span class="bash">本地启动</span><br>hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h5 id="个性化展示"><a href="#个性化展示" class="headerlink" title="个性化展示"></a>个性化展示</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">浏览器tab页名称：修改根目录下_config.yml中的title字段，如图</span><br></code></pre></td></tr></table></figure><p><img src="image-20220116163721344.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">博客标题：主题目录themes\fluid下_config.yml中的blog_title字段。</span><br></code></pre></td></tr></table></figure><p><img src="image-20220116164353436.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">主页正中间的文字：主题目录 themes\fluid下的_config.yml中的text字段。</span><br></code></pre></td></tr></table></figure><p><img src="image-20220116164811694.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">更多详见https://hexo.fluid-dev.com/docs/start/</span><br></code></pre></td></tr></table></figure><h4 id="4、git联通github"><a href="#4、git联通github" class="headerlink" title="4、git联通github"></a>4、git联通github</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.ssh<br><span class="hljs-meta">#</span><span class="bash">x代表你申请github时的用户名，y代表申请github时的邮箱</span><br>git config --global user.name &quot;x&quot;<br>git config --global user.email &quot;y&quot;<br>ssh-keygen -t rsa -C &quot;y&quot;<br>ls #应该出现这两个文件id_rsa  id_rsa.pub<br>cat id_rsa.pub #复制里面的东西<br><span class="hljs-meta">#</span><span class="bash">到github中点头像选settings---SSH and GPG keys---New SSH key---新建名字随便，将上边的秘钥复制</span><br></code></pre></td></tr></table></figure><img src="../使用hexo和github搭建个人博客/image-20220116154930013.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">测试连通性</span><br>ssh -T git@github.com<br><span class="hljs-meta">#</span><span class="bash">出现以下即成功</span><br></code></pre></td></tr></table></figure><p><img src="image-20220116155035410.png"></p><h4 id="5、部署到github上"><a href="#5、部署到github上" class="headerlink" title="5、部署到github上"></a>5、部署到github上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装hexo-deployer-git</span><br>npm install hexo-deployer-git --save<br><span class="hljs-meta">#</span><span class="bash">根目录修改_config.yml</span><br>hexo g -d<br></code></pre></td></tr></table></figure><p><img src="image-20220116163655522.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">hexo g -d</span><br><span class="hljs-meta">#</span><span class="bash">通过网页访问https://caigouchen.github.io/</span><br></code></pre></td></tr></table></figure><h4 id="6、参考"><a href="#6、参考" class="headerlink" title="6、参考"></a>6、参考</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1、https://blog.csdn.net/yaorongke/article/details/119089190</span><br><span class="hljs-meta">#</span><span class="bash">2、https://zhuanlan.zhihu.com/p/111614119</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
